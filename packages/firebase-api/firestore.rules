rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{document=**} {
      allow read, write: if false;
    }
    match /comment-boxes/{commentBoxId} {
      allow read: if true;
      allow create: if request.auth != null
        && request.resource.data.keys().hasAll(['commentURL', 'createdAt']);
      allow update, delete: if false;
      
      match /comments/{commentId} {
        allow read: if true;
        allow create: if request.auth != null
          && request.resource.data.keys().hasAll(['data', 'likes', 'authorPublicAddress', 'createdAt', 'updatedAt'])
          && request.resource.data.authorPublicAddress == request.auth.uid
          && request.resource.data.likes.size() == 0
          && request.resource.data.data.size() <= 2000;
        allow update: if request.auth != null
          && (
            // update likes
            (
              request.resource.data.likes != resource.data.likes
              && request.resource.data.updatedAt != resource.data.updatedAt
              && (
                // if unlike
                (request.auth.uid in resource.data.likes && !(request.auth.uid in request.resource.data.likes) && (resource.data.likes.size() - request.resource.data.likes.size() == 1))
                // if like
                || (!(request.auth.uid in resource.data.likes) && request.auth.uid in request.resource.data.likes && (request.resource.data.likes.size() - resource.data.likes.size() == 1))
              )
            )
            // update data (edit comment)
          )
        allow delete: if request.auth != null
          && resource.data.authorPublicAddress == request.auth.uid;
      }
    }
  }
}